Notes :-
 * Composition is often favored over inheritance in certain scenarios, especially when designing flexible and maintainable code.
   Composition involves constructing classes that contain references to other classes, rather than inheriting their behavior.
   This approach promotes code reuse without imposing the tight coupling that can sometimes come with inheritance.
   Composition often promotes better adherence to the SRP, loose coupling between classes compared to inheritance.
* DRY (Don't Repeat Yourself)
* SOLID Principles
* YAGNI (You Aren't Gonna Need It)
* KISS (Keep It Simple, Stupid):
* Law of Demeter (LoD) or Principle of Least Knowledge:
* Fail Fast:
* Convention over Configuration:
* Design Patterns

--------------

     Adapter
     -> There is an already existing data provider which provides data in format1
     -> There is an already existing data consumer which expects data in format2
     -> format1 != format2
     -> We have to write an adapter which converts between the two formats
     -> Consumer will call the adapter
     -> Adapter will call the provider and get data in format1
     -> Adapter will convert data from format1 to format2
     -> Consumer will get data in format2 from the adapter
     -> Real life usage
         -> Let us say we want weather API data and we found a weather API
         -> Our code is expecting data in JSON format
         -> Weather API is returning data in XML format
         -> We will have to write an adapter on the API. The Adapter will call API and get data in XML format and convert it to JSON for use by our code.


Singleton example : Java Runtime Class

 1.) Constructor private
 2.) Create instance of a class at class loading time..mostly happens either via new or static
 3.) Global Access static getInstance() add null check to optimize

 Singleton few threats :-
 * Cloning
 * Serialization
 * Reflection

----------------


1.) Association : It can be Bi-directional, Uni-directional
                --------------- , --------->


        1.A) Aggregation : A has an in instance of B. B can exist without A.
                              "has a" ,

           1.A.A) Composition : it means where child cannot exist independent without parent.
                                Child Lifecycle depends on parent.
                                     "has a"

Generalization : "Is a" but like interface.
                 class PoliceMen extends Men

Dependency :  Payment -- then only-> Flight
              Not an relationship
              Not like composition




Has A relation:- ( Association ) :- one to one , one to many, many to many

  -> Aggregation :- Weak , Both can survive individually like School and Student
  -> Composition :- Strong , ending of once will end other like School and Room

Define :-
S :- A class should have single reason to change.
O :- open for extension closed for modification.
L :- Better to break down functionality that not supported like generalize so that functionality does not affect.
I :- Segregate interfaces.
D :- instead of high level module depend upon low level there should be abstract.


Suggestion :-
1.) S --> Segregate class and their related behaviour into separate class.
2.) O --> Using interface DbSave implement Invoice , FileSave implement Invoice
3.) L --> Class A implement Class B then A is replaceable By B ( Child ). But if Child downsize capability then
                Example : Vehicle --> EngineVehicle --> Car, Bike | Vehicle --> Bicycle
                Common working method is in vehicle and For engine related it's in EngineVehicle
4.) I --> Different interface segregate example restaurant can be broken down to Waiter and Chief to avoid un-necessary function.
5.) D --> Class should depend on interface rather then concrete class
           Example --> Keyboard -> {WiredKeyboard, WirelessKeyboard }
